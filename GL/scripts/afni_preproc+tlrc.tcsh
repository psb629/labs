#!/bin/tcsh -xef

echo "auto-generated by afni_proc.py, Tue May 17 12:57:02 2022"
echo "(version 7.17, July 16, 2021)"
echo "execution started: `date`"

# to execute via tcsh: 
#   tcsh -xef /home/sungbeenpark/Github/labs/GL/scripts/afni_preproc_tmp.tcsh |& tee /home/sungbeenpark/Github/labs/GL/scripts/output.afni_preproc_tmp.tcsh
# to execute via bash: 
#   tcsh -xef /home/sungbeenpark/Github/labs/GL/scripts/afni_preproc_tmp.tcsh 2>&1 | tee /home/sungbeenpark/Github/labs/GL/scripts/output.afni_preproc_tmp.tcsh

# =========================== auto block: setup ============================
# script setup

# take note of the AFNI version
afni -ver

# check that the current AFNI version is recent enough
afni_history -check_date 27 Jun 2019
if ( $status ) then
    echo "** this script requires newer AFNI binaries (than 27 Jun 2019)"
    echo "   (consider: @update.afni.binaries -defaults)"
    exit
endif

# the user may specify a single subject to run with
if ( $#argv > 0 ) then
    set subj = $argv[1]
else
    set subj = GL03
endif

# assign output directory name
set output_dir = /mnt/sdb2/GL/fmri_data/preproc_data/$subj/tlrc

# set list of runs
set runs = (`count -digits 2 1 6`)

# copy stim files into stimulus directory
if ( ! -d $output_dir/stimuli) then
	mkdir -p -m 755 $output_dir/stimuli
endif
cp /mnt/sda2/GL/behavior_data/regressors/${subj}_RewFB.txt \
    /mnt/sda2/GL/behavior_data/regressors/${subj}_RewnFB.txt $output_dir/stimuli

# copy anatomy to results dir
3dcopy /mnt/sda2/GL/fmri_data/${subj}/${subj}.MPRAGE+orig $output_dir/${subj}.MPRAGE

# ============================ auto block: tcat ============================
# apply 3dTcat to copy input dsets to results dir,
# while removing the first 0 TRs
3dTcat -prefix $output_dir/pb00.$subj.r01.tcat \
    /mnt/sda2/GL/fmri_data/${subj}/func.${subj}.r02+orig'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r02.tcat \
    /mnt/sda2/GL/fmri_data/${subj}/func.${subj}.r03+orig'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r03.tcat \
    /mnt/sda2/GL/fmri_data/${subj}/func.${subj}.r04+orig'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r04.tcat \
    /mnt/sda2/GL/fmri_data/${subj}/func.${subj}.r05+orig'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r05.tcat \
    /mnt/sda2/GL/fmri_data/${subj}/func.${subj}.r06+orig'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r06.tcat \
    /mnt/sda2/GL/fmri_data/${subj}/func.${subj}.r07+orig'[0..$]'

# and make note of repetitions (TRs) per run
set tr_counts = ( 300 300 300 300 300 300 )

# -------------------------------------------------------
# enter the results directory (can begin processing data)
cd $output_dir

# ========================= uniformity correction ==========================
# perform 'unifize' uniformity correction on anatomical dataset
3dUnifize -prefix ${subj}.MPRAGE_unif -GM ${subj}.MPRAGE+orig

# ========================== auto block: outcount ==========================
# data check: compute outlier fraction for each volume
touch out.pre_ss_warn.txt
foreach run ( $runs )
    3dToutcount -automask -fraction -polort 5 -legendre                     \
                pb00.$subj.r$run.tcat+orig > outcount.r$run.1D

    # censor outlier TRs per run, ignoring the first 0 TRs
    # - censor when more than 0.05 of automask voxels are outliers
    # - step() defines which TRs to remove via censoring
    1deval -a outcount.r$run.1D -expr "1-step(a-0.05)" > rm.out.cen.r$run.1D

    # outliers at TR 0 might suggest pre-steady state TRs
    if ( `1deval -a outcount.r$run.1D"{0}" -expr "step(a-0.4)"` ) then
        echo "** TR #0 outliers: possible pre-steady state TRs in run $run" \
            >> out.pre_ss_warn.txt
    endif
end

# catenate outlier counts into a single time series
cat outcount.r*.1D > outcount_rall.1D

# catenate outlier censor files into a single time series
cat rm.out.cen.r*.1D > outcount_${subj}_censor.1D

# get run number and TR index for minimum outlier volume
set minindex = `3dTstat -argmin -prefix - outcount_rall.1D\'`
set ovals = ( `1d_tool.py -set_run_lengths $tr_counts                       \
                          -index_to_run_tr $minindex` )
# save run and TR indices for extraction of vr_base_min_outlier
set minoutrun = $ovals[1]
set minouttr  = $ovals[2]
echo "min outlier: run $minoutrun, TR $minouttr" | tee out.min_outlier.txt

# ================================ despike =================================
# apply 3dDespike to each run
foreach run ( $runs )
    3dDespike -NEW -nomask -prefix pb01.$subj.r$run.despike \
        pb00.$subj.r$run.tcat+orig
end

# ================================= tshift =================================
# time shift data so all slice timing is the same 
foreach run ( $runs )
    3dTshift -tzero 0 -quintic -prefix pb02.$subj.r$run.tshift \
             -tpattern alt+z2                                  \
             pb01.$subj.r$run.despike+orig
end

# --------------------------------
# extract volreg registration base
3dbucket -prefix vr_base_min_outlier                           \
    pb02.$subj.r$minoutrun.tshift+orig"[$minouttr]"

# ================================= align ==================================
# for e2a: compute anat alignment transformation to EPI registration base
# (new anat will be intermediate, stripped, ${subj}.MPRAGE_unif_ns+orig)
align_epi_anat.py -anat2epi -anat ${subj}.MPRAGE_unif+orig \
       -save_skullstrip -suffix _al_junk                \
       -epi vr_base_min_outlier+orig -epi_base 0        \
       -epi_strip 3dAutomask                            \
       -cost lpc+ZZ -giant_move -check_flip             \
       -volreg off -tshift off

# ================================== tlrc ==================================
# warp anatomy to standard space
@auto_tlrc -base MNI152_T1_2009c+tlrc -input ${subj}.MPRAGE_unif_ns+orig -no_ss \
             -init_xform AUTO_CENTER

# store forward transformation matrix in a text file
cat_matvec ${subj}.MPRAGE_unif_ns+tlrc::WARP_DATA -I > warp.anat.Xat.1D

# ================================= volreg =================================
# align each dset to base volume, to anat, warp to tlrc space

# verify that we have a +tlrc warp dataset
if ( ! -f ${subj}.MPRAGE_unif_ns+tlrc.HEAD ) then
    echo "** missing +tlrc warp dataset: ${subj}.MPRAGE_unif_ns+tlrc.HEAD" 
    exit
endif

# register and warp
foreach run ( $runs )
    # register each volume to the base image
    3dvolreg -verbose -zpad 1 -base vr_base_min_outlier+orig    \
             -1Dfile dfile.r$run.1D -prefix rm.epi.volreg.r$run \
             -cubic                                             \
             -1Dmatrix_save mat.r$run.vr.aff12.1D               \
             pb02.$subj.r$run.tshift+orig

    # create an all-1 dataset to mask the extents of the warp
    3dcalc -overwrite -a pb02.$subj.r$run.tshift+orig -expr 1   \
           -prefix rm.epi.all1

    # catenate volreg/epi2anat/tlrc xforms
    cat_matvec -ONELINE                                         \
               ${subj}.MPRAGE_unif_ns+tlrc::WARP_DATA -I           \
               ${subj}.MPRAGE_unif_al_junk_mat.aff12.1D -I         \
               mat.r$run.vr.aff12.1D > mat.r$run.warp.aff12.1D

    # apply catenated xform: volreg/epi2anat/tlrc
    3dAllineate -base ${subj}.MPRAGE_unif_ns+tlrc                  \
                -input pb02.$subj.r$run.tshift+orig             \
                -1Dmatrix_apply mat.r$run.warp.aff12.1D         \
                -mast_dxyz 2                                    \
                -prefix rm.epi.nomask.r$run

    # warp the all-1 dataset for extents masking 
    3dAllineate -base ${subj}.MPRAGE_unif_ns+tlrc                  \
                -input rm.epi.all1+orig                         \
                -1Dmatrix_apply mat.r$run.warp.aff12.1D         \
                -mast_dxyz 2 -final NN -quiet                   \
                -prefix rm.epi.1.r$run

    # make an extents intersection mask of this run
    3dTstat -min -prefix rm.epi.min.r$run rm.epi.1.r$run+tlrc
end

# make a single file of registration params
cat dfile.r*.1D > dfile_rall.1D

# ----------------------------------------
# create the extents mask: mask_epi_extents+tlrc
# (this is a mask of voxels that have valid data at every TR)
3dMean -datum short -prefix rm.epi.mean rm.epi.min.r*.HEAD 
3dcalc -a rm.epi.mean+tlrc -expr 'step(a-0.999)' -prefix mask_epi_extents

# and apply the extents mask to the EPI data 
# (delete any time series with missing data)
foreach run ( $runs )
    3dcalc -a rm.epi.nomask.r$run+tlrc -b mask_epi_extents+tlrc \
           -expr 'a*b' -prefix pb03.$subj.r$run.volreg
end

# warp the volreg base EPI dataset to make a final version
cat_matvec -ONELINE                                             \
           ${subj}.MPRAGE_unif_ns+tlrc::WARP_DATA -I               \
           ${subj}.MPRAGE_unif_al_junk_mat.aff12.1D -I  > mat.basewarp.aff12.1D

3dAllineate -base ${subj}.MPRAGE_unif_ns+tlrc                      \
            -input vr_base_min_outlier+orig                     \
            -1Dmatrix_apply mat.basewarp.aff12.1D               \
            -mast_dxyz 2                                        \
            -prefix final_epi_vr_base_min_outlier

# create an anat_final dataset, aligned with stats
3dcopy ${subj}.MPRAGE_unif_ns+tlrc anat_final.$subj

# record final registration costs
3dAllineate -base final_epi_vr_base_min_outlier+tlrc -allcostX  \
            -input anat_final.$subj+tlrc |& tee out.allcostX.txt

# -----------------------------------------
# warp anat follower datasets (affine)
3dAllineate -source ${subj}.MPRAGE_unif+orig                       \
            -master anat_final.$subj+tlrc                       \
            -final wsinc5 -1Dmatrix_apply warp.anat.Xat.1D      \
            -prefix anat_w_skull_warped

# ================================== blur ==================================
# blur each volume of each run
foreach run ( $runs )
    3dmerge -1blur_fwhm 4.0 -doall -prefix pb04.$subj.r$run.blur \
            pb03.$subj.r$run.volreg+tlrc
end

# ================================== mask ==================================
# create 'full_mask' dataset (union mask)
foreach run ( $runs )
    3dAutomask -prefix rm.mask_r$run pb04.$subj.r$run.blur+tlrc
end

# create union of inputs, output type is byte
3dmask_tool -inputs rm.mask_r*+tlrc.HEAD -union -prefix full_mask.$subj

# ---- create subject anatomy mask, mask_anat.$subj+tlrc ----
#      (resampled from tlrc anat)
3dresample -master full_mask.$subj+tlrc -input ${subj}.MPRAGE_unif_ns+tlrc \
           -prefix rm.resam.anat

# convert to binary anat mask; fill gaps and holes
3dmask_tool -dilate_input 5 -5 -fill_holes -input rm.resam.anat+tlrc    \
            -prefix mask_anat.$subj

# compute tighter EPI mask by intersecting with anat mask
3dmask_tool -input full_mask.$subj+tlrc mask_anat.$subj+tlrc            \
            -inter -prefix mask_epi_anat.$subj

# compute overlaps between anat and EPI masks
3dABoverlap -no_automask full_mask.$subj+tlrc mask_anat.$subj+tlrc      \
            |& tee out.mask_ae_overlap.txt

# note Dice coefficient of masks, as well
3ddot -dodice full_mask.$subj+tlrc mask_anat.$subj+tlrc                 \
      |& tee out.mask_ae_dice.txt

# ---- create group anatomy mask, mask_group+tlrc ----
#      (resampled from tlrc base anat, MNI152_T1_2009c+tlrc)
3dresample -master full_mask.$subj+tlrc -prefix ./rm.resam.group        \
           -input /usr/local/afni/abin/MNI152_T1_2009c+tlrc

# convert to binary group mask; fill gaps and holes
3dmask_tool -dilate_input 5 -5 -fill_holes -input rm.resam.group+tlrc   \
            -prefix mask_group

# note Dice coefficient of anat and template masks
3ddot -dodice mask_anat.$subj+tlrc mask_group+tlrc                      \
      |& tee out.mask_at_dice.txt

# ================================= scale ==================================
# scale each voxel time series to have a mean of 100
# (be sure no negatives creep in)
# (subject to a range of [0,200])
foreach run ( $runs )
    3dTstat -prefix rm.mean_r$run pb04.$subj.r$run.blur+tlrc
    3dcalc -a pb04.$subj.r$run.blur+tlrc -b rm.mean_r$run+tlrc \
           -c mask_epi_extents+tlrc                            \
           -expr 'c * min(200, a/b*100)*step(a)*step(b)'       \
           -prefix pb05.$subj.r$run.scale
end

# ================================ regress =================================

# compute de-meaned motion parameters (for use in regression)
1d_tool.py -infile dfile_rall.1D -set_nruns 6                      \
           -demean -write motion_demean.1D

# compute motion parameter derivatives (for use in regression)
1d_tool.py -infile dfile_rall.1D -set_nruns 6                      \
           -derivative -demean -write motion_deriv.1D

# convert motion parameters for per-run regression
1d_tool.py -infile motion_demean.1D -set_nruns 6                   \
           -split_into_pad_runs mot_demean

1d_tool.py -infile motion_deriv.1D -set_nruns 6                    \
           -split_into_pad_runs mot_deriv

# create censor file motion_${subj}_censor.1D, for censoring motion 
1d_tool.py -infile dfile_rall.1D -set_nruns 6                      \
    -show_censor_count -censor_prev_TR                             \
    -censor_motion 0.4 motion_${subj}

# combine multiple censor files
1deval -a motion_${subj}_censor.1D -b outcount_${subj}_censor.1D   \
       -expr "a*b" > censor_${subj}_combined_2.1D

# create bandpass regressors (instead of using 3dBandpass, say)
# (make separate regressors per run, with all in one file)
foreach index ( `count -digits 1 1 $#runs` )
    set nt = $tr_counts[$index]
    set run = $runs[$index]
    1dBport -nodata $nt 2 -band 0.01 0.1 -invert -nozero >! rm.bpass.1D
    1d_tool.py -infile rm.bpass.1D -pad_into_many_runs $run $#runs \
               -set_run_lengths $tr_counts                         \
               -write bpass.r$run.1D
end
1dcat bpass.r*1D > bandpass_rall.1D

# note TRs that were not censored
set ktrs = `1d_tool.py -infile censor_${subj}_combined_2.1D        \
                       -show_trs_uncensored encoded`

 ## ------------------------------
 ## run the regression analysis
 #3dDeconvolve -input pb05.$subj.r*.scale+tlrc.HEAD                  \
 #    -censor censor_${subj}_combined_2.1D                           \
 #    -ortvec bandpass_rall.1D bandpass                              \
 #    -ortvec mot_demean.r01.1D mot_demean_r01                       \
 #    -ortvec mot_demean.r02.1D mot_demean_r02                       \
 #    -ortvec mot_demean.r03.1D mot_demean_r03                       \
 #    -ortvec mot_demean.r04.1D mot_demean_r04                       \
 #    -ortvec mot_demean.r05.1D mot_demean_r05                       \
 #    -ortvec mot_demean.r06.1D mot_demean_r06                       \
 #    -ortvec mot_deriv.r01.1D mot_deriv_r01                         \
 #    -ortvec mot_deriv.r02.1D mot_deriv_r02                         \
 #    -ortvec mot_deriv.r03.1D mot_deriv_r03                         \
 #    -ortvec mot_deriv.r04.1D mot_deriv_r04                         \
 #    -ortvec mot_deriv.r05.1D mot_deriv_r05                         \
 #    -ortvec mot_deriv.r06.1D mot_deriv_r06                         \
 #    -polort 5                                                      \
 #    -num_stimts 2                                                  \
 #    -stim_times_AM2 1 stimuli/${subj}_RewFB.txt 'BLOCK(1,1)'          \
 #    -stim_label 1 RewFB                                            \
 #    -stim_times_AM2 2 stimuli/${subj}_RewnFB.txt 'BLOCK(1,1)'         \
 #    -stim_label 2 RewnFB                                           \
 #    -jobs 1                                                        \
 #    -gltsym 'SYM: RewFB -RewnFB'                                   \
 #    -glt_label 1 RewFB-RewnFB                                      \
 #    -fout -tout -x1D X.xmat.1D -xjpeg X.jpg                        \
 #    -x1D_uncensored X.nocensor.xmat.1D                             \
 #    -fitts fitts.$subj                                             \
 #    -errts errts.${subj}                                           \
 #    -bucket stats.$subj
 #
 #
 ## if 3dDeconvolve fails, terminate the script
 #if ( $status != 0 ) then
 #    echo '---------------------------------------'
 #    echo '** 3dDeconvolve error, failing...'
 #    echo '   (consider the file 3dDeconvolve.err)'
 #    exit
 #endif
 #
 #
 ## display any large pairwise correlations from the X-matrix
 #1d_tool.py -show_cormat_warnings -infile X.xmat.1D |& tee out.cormat_warn.txt
 #
 ## display degrees of freedom info from X-matrix
 #1d_tool.py -show_df_info -infile X.xmat.1D |& tee out.df_info.txt
 #
 ## create an all_runs dataset to match the fitts, errts, etc.
 #3dTcat -prefix all_runs.$subj pb05.$subj.r*.scale+tlrc.HEAD
 #
 ## --------------------------------------------------
 ## create a temporal signal to noise ratio dataset 
 ##    signal: if 'scale' block, mean should be 100
 ##    noise : compute standard deviation of errts
 #3dTstat -mean -prefix rm.signal.all all_runs.$subj+tlrc"[$ktrs]"
 #3dTstat -stdev -prefix rm.noise.all errts.${subj}+tlrc"[$ktrs]"
 #3dcalc -a rm.signal.all+tlrc                                       \
 #       -b rm.noise.all+tlrc                                        \
 #       -expr 'a/b' -prefix TSNR.$subj
 #
 ## ---------------------------------------------------
 ## compute and store GCOR (global correlation average)
 ## (sum of squares of global mean of unit errts)
 #3dTnorm -norm2 -prefix rm.errts.unit errts.${subj}+tlrc
 #3dmaskave -quiet -mask full_mask.$subj+tlrc rm.errts.unit+tlrc     \
 #          > mean.errts.unit.1D
 #3dTstat -sos -prefix - mean.errts.unit.1D\' > out.gcor.1D
 #echo "-- GCOR = `cat out.gcor.1D`"
 #
 ## ---------------------------------------------------
 ## compute correlation volume
 ## (per voxel: correlation with masked brain average)
 #3dmaskave -quiet -mask full_mask.$subj+tlrc errts.${subj}+tlrc     \
 #          > mean.errts.1D
 #3dTcorr1D -prefix corr_brain errts.${subj}+tlrc mean.errts.1D
 #
 ## --------------------------------------------------
 ## extract non-baseline regressors from the X-matrix,
 ## then compute their sum
 #1d_tool.py -infile X.nocensor.xmat.1D -write_xstim X.stim.xmat.1D
 #3dTstat -sum -prefix sum_ideal.1D X.stim.xmat.1D
 #
 ## ================== auto block: generate review scripts ===================
 #
 ## generate a review script for the unprocessed EPI data
 #gen_epi_review.py -script @epi_review.$subj \
 #    -dsets pb00.$subj.r*.tcat+orig.HEAD
 #
 ## generate scripts to review single subject results
 ## (try with defaults, but do not allow bad exit status)
 #gen_ss_review_scripts.py -exit0             \
 #    -mot_limit 0.4 -out_limit 0.05          \
 #    -mask_dset full_mask.$subj+tlrc.HEAD    \
 #    -ss_review_dset out.ss_review.$subj.txt \
 #    -write_uvars_json out.ss_review_uvars.json
 #
# ========================== auto block: finalize ==========================

# remove temporary files
\rm -f rm.*
\rm -f *+orig.*

 ## if the basic subject review script is here, run it
 ## (want this to be the last text output)
 #if ( -e @ss_review_basic ) then
 #    ./@ss_review_basic |& tee out.ss_review.$subj.txt
 #
 #    # generate html ss review pages
 #    # (akin to static images from running @ss_review_driver)
 #    apqc_make_tcsh.py -review_style pythonic -subj_dir . \
 #        -uvar_json out.ss_review_uvars.json
 #    tcsh @ss_review_html |& tee out.review_html
 #    apqc_make_html.py -qc_dir QC_$subj
 #
 #    echo "\nconsider running: \n\n    afni_open -b /mnt/sdb2/GL/fmri_data/preproc_data//QC_$subj/index.html\n"
 #endif

# return to parent directory (just in case...)
cd ..

echo "execution finished: `date`"




# ==========================================================================
# script generated by the command:
#
# afni_proc.py -subj_id ${subj} -script                                          \
#     /home/sungbeenpark/Github/labs/GL/scripts/afni_preproc_tmp.tcsh         \
#     -out_dir /mnt/sdb2/GL/fmri_data/preproc_data/ -dsets                    \
#     /mnt/sda2/GL/fmri_data/${subj}/func.${subj}.r02+orig.HEAD                     \
#     /mnt/sda2/GL/fmri_data/${subj}/func.${subj}.r03+orig.HEAD                     \
#     /mnt/sda2/GL/fmri_data/${subj}/func.${subj}.r04+orig.HEAD                     \
#     /mnt/sda2/GL/fmri_data/${subj}/func.${subj}.r05+orig.HEAD                     \
#     /mnt/sda2/GL/fmri_data/${subj}/func.${subj}.r06+orig.HEAD                     \
#     /mnt/sda2/GL/fmri_data/${subj}/func.${subj}.r07+orig.HEAD -blocks despike     \
#     tshift align tlrc volreg blur mask scale regress -copy_anat             \
#     /mnt/sda2/GL/fmri_data/${subj}/${subj}.MPRAGE+orig -anat_has_skull yes        \
#     -anat_uniform_method unifize -anat_unif_GM yes -tcat_remove_first_trs 0 \
#     -tshift_opts_ts -tpattern alt+z2 -tlrc_base MNI152_T1_2009c+tlrc        \
#     -tlrc_opts_at -init_xform AUTO_CENTER -align_opts_aea -cost lpc+ZZ      \
#     -giant_move -check_flip -volreg_align_e2a -volreg_align_to MIN_OUTLIER  \
#     -volreg_tlrc_warp -blur_size 4.0 -regress_stim_times                    \
#     /mnt/sda2/GL/behavior_data/regressors/${subj}_RewFB.txt                    \
#     /mnt/sda2/GL/behavior_data/regressors/${subj}_RewnFB.txt                   \
#     -regress_stim_labels RewFB RewnFB -regress_stim_types AM2               \
#     -regress_basis 'BLOCK(1,1)' -regress_opts_3dD -jobs 1 -gltsym 'SYM:     \
#     RewFB -RewnFB' -glt_label 1 RewFB-RewnFB -regress_censor_motion 0.4     \
#     -regress_censor_outliers 0.05 -regress_bandpass 0.01 0.1                \
#     -regress_motion_per_run -regress_apply_mot_types demean deriv           \
#     -html_review_style pythonic
